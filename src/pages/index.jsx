import Head from "next/head";
import Link from "next/link";
import Image from "next/image";

import { useState, useEffect } from "react";
import useSWR from "swr";
import Skeleton from "@mui/material/Skeleton";

import { getServerCookie } from "../utils/cookie";

import Header from "../components/Header";
import FriendPending from "../components/FriendPending";
import FriendsList from "../components/FriendsList";
import NewPost from "../components/NewPost";
import Post from "../components/Post";
import ExpandMenu from "../components/ExpandMenu";

import useApi from "../hooks/useApi";
import useApiWithSWR from "../hooks/useApiWithSWR";
import useInfiniteScroll from "../hooks/useInfiniteScroll";

export default function Home({ userId }) {
  const { callApi } = useApiWithSWR();
  const { data: userData, isLoading: isProfileLoading } = useSWR(
    [`/users/${userId}/profile`, userId],
    () => callApi(`/users/${userId}/profile`, "GET")
  );
  const { data: initialPostDatas, isLoading: isPostsLoading } = useSWR(
    "/posts/search",
    () => callApi("/posts/search", "GET")
  );
  const { data: friendsPendingDatas, isLoading: isFriendsPendingLoading } =
    useSWR("/friends/pending", () => callApi("/friends/pending", "GET"));
  const { data: friendsDatas, isLoading: isFriendsLoading } = useSWR(
    "/friends/",
    () => callApi("/friends/", "GET")
  );
  const [postDatas, setPostDatas] = useState({});

  useEffect(() => {
    setPostDatas(initialPostDatas);
  }, [initialPostDatas]);

  const {
    data: { posts: newPosts, next_cursor },
    callApi: getPostByCursor,
  } = useApi();
  const handleGetPostByCursor = async () => {
    if (!postDatas.next_cursor) {
      return;
    }
    await getPostByCursor(
      `/posts/search?cursor=${postDatas.next_cursor}`,
      "GET"
    );
  };
  useEffect(() => {
    if (newPosts) {
      setPostDatas({
        posts: [...postDatas.posts, ...newPosts],
        next_cursor,
      });
    }
  }, [newPosts]);

  useInfiniteScroll(handleGetPostByCursor, 100);

  useEffect(() => {
    const handleScroll = () => {
      if (
        isProfileLoading ||
        isPostsLoading ||
        isFriendsPendingLoading ||
        isFriendsLoading
      ) {
        window.scrollTo(0, 0);
      }
    };
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [
    isProfileLoading,
    isPostsLoading,
    isFriendsPendingLoading,
    isFriendsLoading,
  ]);

  return (
    <>
      <Head>
        <title>CanChu</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta httpEquiv="X-UA-Compatible" content="ie=edge" />
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header
        userPicture={userData?.user?.picture}
        userName={userData?.user?.name}
        userId={userId}
      />
      <div className="pt-3 sm:px-32 sm:pt-6 min-h-screen sm:flex sm:justify-between sm:gap-3 bg-[#f3f3f3] dark:bg-darkLayoutColor">
        <aside className="mx-auto sm:mx-0 w-5/6 sm:w-2/6 flex flex-col items-center gap-1 sm:gap-3.5">
          <div
            className={`w-full bg-white dark:bg-darkBackgroundColor dark:text-darkWhiteContentColor border border-solid border-gray-200 dark:border-darkBorderColor rounded-2xl `}
          >
            <div className="py-1 sm:pt-3 sm:pb-2 px-3 sm:px-6">
              <div className="pb-2 sm:pb-3 border-b border-solid border-gray-200 dark:border-darkBorderColor">
                <div className="my-2 flex items-center gap-3.5">
                  {isProfileLoading ? (
                    <>
                      <Skeleton variant="circular" width={40} height={40} />
                      <h5 className="text-lg font-bold">
                        <Skeleton variant="text" width={50} height={30} />
                      </h5>
                    </>
                  ) : (
                    <>
                      <Link href={`/users/${userId}`} className="shrink-0">
                        <Image
                          src={userData?.user?.picture || "/myphoto.svg"}
                          alt="avatar"
                          className="w-10 h-10 rounded-full object-cover object-center dark:bg-white"
                          width={200}
                          height={200}
                        />
                      </Link>
                      <h5 className="text-lg font-bold break-all">
                        {userData?.user?.name}
                      </h5>
                    </>
                  )}
                </div>
              </div>
              <div className="pt-1">
                {isFriendsPendingLoading ? (
                  <>
                    <div className="my-2 flex items-center gap-2 sm:gap-3.5">
                      <Skeleton variant="circular" width={40} height={40} />
                      <h5 className="text-base sm:text-lg font-bold text-gray-500">
                        <Skeleton variant="text" width={65} height={30} />
                      </h5>
                    </div>
                    <div className="my-1.5 flex items-center justify-between">
                      <div className="flex items-center gap-2 sm:gap-3.5">
                        <Skeleton variant="circular" width={40} height={40} />
                        <Skeleton variant="text" width={80} height={30} />
                      </div>
                      <div className="flex gap-2">
                        <Skeleton variant="rounded" width={50} height={30} />
                        <Skeleton variant="rounded" width={50} height={30} />
                      </div>
                    </div>
                  </>
                ) : (
                  friendsPendingDatas?.users?.length > 0 && (
                    <>
                      <div className="my-2 flex items-center gap-2 sm:gap-3.5">
                        <div className="w-10 h-10 flex justify-center items-center dark:bg-white dark:rounded-sm shrink-0">
                          <Image
                            src="/friends.png"
                            alt="friends"
                            width={26}
                            height={26}
                          />
                        </div>
                        <h5 className="text-base sm:text-lg font-bold text-gray-500 dark:text-white">
                          朋友邀請
                        </h5>
                      </div>
                      {friendsPendingDatas?.users?.map((friendsPendingData) => (
                        <FriendPending
                          key={friendsPendingData.id}
                          id={friendsPendingData.id}
                          name={friendsPendingData.name}
                          picture={friendsPendingData.picture}
                          friendshipId={friendsPendingData.friendship.id}
                        />
                      ))}
                    </>
                  )
                )}
                {isFriendsLoading ? (
                  <>
                    <div className="my-2 flex items-center gap-2 sm:gap-3.5">
                      <Skeleton variant="circular" width={40} height={40} />
                      <h5 className="text-base sm:text-lg font-bold text-gray-500">
                        <Skeleton variant="text" width={65} height={30} />
                      </h5>
                    </div>
                    <div className="my-1.5 flex items-center gap-2 sm:gap-3.5">
                      <Skeleton variant="circular" width={40} height={40} />
                      <h5 className="text-base sm:text-lg font-bold text-gray-500">
                        <Skeleton variant="text" width={60} height={30} />
                      </h5>
                    </div>
                  </>
                ) : (
                  <FriendsList friendsDatas={friendsDatas} />
                )}
              </div>
            </div>
          </div>
          {!(
            isProfileLoading ||
            isPostsLoading ||
            isFriendsPendingLoading ||
            isFriendsLoading
          ) && (
            <p className="mb-5 mx-auto text-sm sm:text-base font-normal text-gray-800 dark:text-darkWhiteContentColor">
              關於我們 · 隱私權條款 · Cookie 條款 · <br />
              &copy; 2023 CanChu, Inc.
            </p>
          )}
        </aside>
        <main className="px-3 sm:px-0 pb-5 flex-1">
          <NewPost
            picture={userData?.user?.picture}
            isProfileLoading={isProfileLoading}
          />
          {isPostsLoading ? (
            <div className="mb-3 sm:mb-6 bg-white border border-solid border-gray-200 rounded-2xl">
              <div className="pt-2 sm:pt-5 px-4 sm:px-9 relative border-b border-solid border-gray-300">
                <div className="flex items-center gap-3">
                  <Skeleton
                    variant="circular"
                    className="shrink-0"
                    width={80}
                    height={80}
                  />
                  <div>
                    <h2 className="text-base font-bold">
                      <Skeleton variant="text" width={60} height={30} />
                    </h2>
                    <p className="text-xs font-normal text-gray-400">
                      <Skeleton variant="text" width={60} height={25} />
                    </p>
                  </div>
                </div>
                <div className="pt-4 px-1.5 pb-10">
                  <pre className="text-sm sm:text-base">
                    <Skeleton
                      variant="rectangular"
                      className="w-full"
                      height={60}
                    />
                  </pre>
                </div>
                <div className="py-2.5 px-1.5 flex gap-2.5 border-t border-b border-solid border-gray-400">
                  <Skeleton
                    variant="circular"
                    className="shrink-0"
                    width={23}
                    height={23}
                  />
                  <Skeleton
                    variant="circular"
                    className="shrink-0"
                    width={23}
                    height={23}
                  />
                </div>
                <div className="py-2.5 flex justify-between gap-2.5 text-sm sm:text-base font-sans text-gray-500">
                  <p>
                    <Skeleton variant="text" width={80} height={30} />
                  </p>
                  <p>
                    <Skeleton variant="text" width={50} height={30} />
                  </p>
                </div>
              </div>
              <div className="py-3 sm:py-5 px-4 sm:px-7 flex items-center gap-3 ">
                <Skeleton
                  variant="circular"
                  className="shrink-0"
                  width={48}
                  height={48}
                />
                <div className="w-full flex relative">
                  <Skeleton variant="rounded" className="w-full h-7 sm:h-10" />
                </div>
              </div>
            </div>
          ) : (
            postDatas?.posts?.map((postData) => (
              <Post
                key={postData.id}
                id={postData.id}
                picture={postData.picture}
                name={postData.name}
                created_at={postData.created_at}
                context={postData.context}
                like_count={postData.like_count}
                comment_count={postData.comment_count}
                is_liked={postData.is_liked}
                userPicture={userData?.user?.picture}
                userId={userId}
                postUserId={postData.user_id}
                getPost={callApi}
              />
            ))
          )}
          {postDatas?.next_cursor && <ExpandMenu />}
        </main>
      </div>
    </>
  );
}

export async function getServerSideProps(context) {
  const token = getServerCookie("userInfo", "token", context.req);
  const userId = getServerCookie("userInfo", "id", context.req);

  if (!token) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: { token, userId },
  };
}
